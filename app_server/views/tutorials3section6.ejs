<!doctype html>
<html lang="en" ng-app>
  <head>
    <title>Tutorials4Unity</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap-responsive.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/main.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie9.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie8.css">
    <link rel="stylesheet" href="/bootstrap2/css/font-awesome.min.css">
    <style></style>
    </head>
    <body>
  <div id="page-wrapper">
    <!-- Header-->
    <header id="header">
      <h1><a href="/">Tutorials4Unity</a></h1>
      <nav><a href="#menu">Menu</a></nav>
       <button onclick="topFunction()" id="myBtn" title="Go to top">Go to the Top</button>
    </header>
    <!-- Menu-->
    <nav id="menu">
      <div class="inner">
        <h2>Menu</h2>
        <ul class="links">
          <li><a href="/">Home</a></li>
          <li><a href="tutorialshome">Tutorials</a></li>
          <li><a href="resources">Resources</a></li>
          <li><a href="about">About</a></li>
          <li><a href="help">Help</a></li>
          <li><a href="codehome">Code</a></li>
           <!--<li><a href="login">Log In</a></li>-->
          <!--<li><a href="signup">Sign Up</a></li>-->
        </ul><a href="#" class="close">Close</a>
      </div>
    </nav>
    <!-- Wrapper-->
    <section id="wrapper">
      <header>
        <div class="inner">
          <h1>Tutorial 3 Section 6</h1>
          <h2>Let's Change the Color with a Script!</h2>
          
             <p>We are going to be adding our first script to our game.</p>
              <p>If you would like to go back to any of the previous tutorials,
              please click <a href="tutorialshome">here!</a></p>
             <!-- <iframe width="420" height="315"
          src="">
          </iframe> -->
        </div>
      </header>
      
      <!-- Content-->
      <div class="wrapper">
        <div class="inner">
      
          <p>Welcome back! </p>
          
         <h4>Please remember to save after we have made any changes and especially before you try to test out your game. 
          If you try to play before you save, the new changes will not take effect and you will have to redo your changes.
          You can do this by going up to <b>File</b> and click on <b>Save</b>. You can also do this by pressing and holding <b>ctrl + S</b> (for PC)
          or <b>Command + S</b> (for Mac).</h4>
           
           <p>
             We have our <b>Player</b>, our <b>Floor</b>, and our <b>Globe</b>, but they don’t do anything.
             When our <b>Player</b> object tries to interact with our <b>Globe</b>, nothing happens.
             That’s because we haven’t told it what to do yet. And in this chapter, we are
             going to. </p>

            <p>Please follow along as best as you can. This chapter may be a little longer
            than most of the others. </p>
            
            <p>First make sure Unity and your project is open. Once it is open, click your
            <b>Globe</b> object and look at your <b>Inspector Window</b>. </p>
            
            <p>Now go all of the way down in the <b>Inspector Window</b> and you will see a button
            called <b>Add Component</b>. Click on it and then you should see a bunch of different
            items that we can add to our <b>Globe</b>. Instead of looking through all of these items,
            click on the search bar above the items and type in <b>New Script</b>. You should see
            an item called <b>New Script</b> appear. Click on it and it will then ask you for the
            name of your new script. </p>
            
           <p> Type in <b>ColorChange</b> and then click on the button <b>Create and Add</b> at the bottom.
            The script <b>ColorChange (Script)</b> should be added to the <b>Globe</b> object. </p>
            
            
           <p> Now before we go into <b>ColorChange</b>, let’s make sure we understand what a script is.
            A script is a set of instructions a person created for a program like Unity to
            understand and then follow. Think of it as a recipe. In a recipe, you are told how
            much ingredients you need, how to prepare then, and then how to cook it. </p>
            
            <p>It is the same thing here. We are going to tell Unity what want to have done and
            then Unity should, if we tell the right directions, do what we ask. Essentially
            what we will be doing is coding.</p>
            
            <p>The “language”, “programming language”, or vocabulary we will be using is C#
            (pronounced C Sharp). C# is a object-oriented programming language that scripts can
            be written in. In other words, it is a “language” that the computer can understand
            that can hold and use data and objects. </p>
            
            <p>Unity currently uses and understands two of these languages: C# and Javascript. We
            are using C# because it is a little bit easier for beginners to understand and it
            seems to be the language most Unity developers use. </p>
            
            
          
            
            <p>Now we can go into what we are going to put into <b>ColorChange</b>. Next to the name of
            <b>ColorChange (Script)</b>, you should see a book, two sliding bars, and either a gear or three vertical dots (like ... but going 
            up and down). Click on either the gear or the three dots. You then will see a list of options, like <b>Reset</b>, <b>Remove Component</b>,
            and <b>Edit Script</b>. Click on <b>Edit Script</b>. </p>
    
           <h4>Microsoft Visual Studio</h4>
            
            <p>For PC Users:</p>
            <p>Another program called <b>Microsoft Visual Studio</b> should appear and load. This is
            a program that comes and downloads with Unity. <b>Visual Studio</b> allows for us to
            edit our script, save it, and then have it run in Unity. </p>
            
            <p><b>Microsoft Visual Studio</b> may ask you sign up or login. If you have a Microsoft
            account (like a hotmail), you can use this to login. If you do not, use the same 
            email you used to sign up for Unity (<a href="tutorials1section3">Tutorial 1 Section 3)</a>.
            Unfortunately, if you do not login or sign up, you cannot use <b>Microsoft Visual Studio</b>
            to edit your code. </p>
            
            <p>For Mac Users:</p>
            
            <p>In case <b>Microsoft Visual Studio</b> does not install, here is what you can do.</p>
            
            <p>Click <a href="https://visualstudio.microsoft.com/vs/mac/">HERE</a> or copy and paste this link: https://visualstudio.microsoft.com/vs/mac/
            to have you go to the <b>Microsoft Visual Studio</b> page for Macs. </p>
            
            <p>Install it onto your Mac, making sure to click on Android, .Net, and Xamarin. Make sure that at least one of the items you are installing
            has <b>C#</b> in it.</p>
            
            <p>After it is done installing, it should pop up asking if you would to login and if you like to download the CLI tools. For the moment
            click on Maybe Later. Then click on the Mac keys and click Continue.</p>
            
            <p>Finally, go back to <b>Unity</b>, go to your <b>Globe</b>, and click on the three dots or gear next to your <b>ColorChange()</b> script.</p>
            
            <h4>Back to the tutorial:</h4>
            
            <p>When it initially appears, you should see the name of our script next to 
            <b>public class</b>. All of the information you see is the basic code Unity gives you. </p> 
            
            <p>Whenever you see the word <b>using</b> next to something, it means that the code is 
            telling our script  that we want Unity to look in these “libraries” for other
            code or objects and that we might want to use them. These libraries have all of
            the up to date information. There are multiple libraries and you can always
            specifically say which ones or which parts of one you want to use. </p>
            
            <p>For understanding purposes, and because we don’t want to accidently delete and
            lose contact, we are going to keep these libraries and leave them alone. You
            should never place connections to libraries anywhere else but at the very top
            of your code. </p>
            
           <p> Here is some code lingo. A class, like you see with <b>public class</b>, is template
            that holds code that we want to run. Think of it as the recipe. It has
            information about the objects we are using, it can create new objects, talk
            to the ones we currently have, and tell them what to do. Classes can be
            private or public. A private class is a class that can only be accessed or
            seen by one object. A public class is a class that can be seen and used by
            not only the object that is using it, but by other objects in the area. </p>
            
            <p><b>Monobehaviour</b> is an existing class in Unity that our class can use to ask
            for and get some help. Think of <b>Monobehaviour</b> as a plate and <b>ColorChange</b>
            as a sandwich. Without <b>Monobehaviour</b>, we have nowhere to place and hold our
            <b>ColorChange</b> sandwich. </p>
            
           <p>A method is an instruction that tells the object what to do. Think of it as
            a direction in a recipe, like ‘put the cookies in the oven at 350 degrees’.
            It says what to specifically an object or the program what to specifically do.</p>
            
            <p>So at the top we have our connections to our libraries, we have a announcement
            saying we are working on a public class called <b>ColorChange</b>, and inside of
            our class, we already have the method <b>Start()</b> and <b>Update()</b>. </p>
            
            <p>The <b>Start()</b> method is a method can Unity calls on first and asks for any
            specific information that we want to happen at the beginning of our game.
            For the purpose of <b>ColorChange</b> (and our method in the next chapter), we
            will not being using <b>Start()</b> because we only want things to happen after
            the game has already started. </p>
            
            <p>The <b>Update()</b> method is a method that Unity calls once every frame, or
            once every unknown amount of milliseconds (or less than a second). The
            reason why the amount is unknown is because it depends a lot on your
            computer, and later phone, speed and capability to handle games. So
            while for one person a frame happens once every 5 milliseconds, for
            another it can happen once every 10 milliseconds. Every time a frame
            is ran, Unity will do the things inside here.  </p>
            
            <p>For <b>ColorChange</b> we will not be using the <b>Update()</b> method, but for
            our second script we will.</p>
            
            <p>Last thing before we add anything new, the word <b>void</b> in front of
            <b>Start()</b> and <b>Update()</b> means that we will not be <b>returning</b> or
            sending back any information. In front of every method we need to
            say what it is returning, if it is going to be public or private,
            and if the method needs specific information. <b>Start()</b> and <b>Update()</b>
            don’t ask for any outside information so that’s why inside the
            parenthesis () are empty. </p>
            
            
            <p>Let us dig into the code we are adding.</p>
            
            <p>Above <b>void Start()</b> but below <b>public class</b>, we are going to click on enter (have it go onto a new line) and we are going to type in:</p>
            
            <code>public Renderer rend;</code>
            
            <p>Whenever we add in new code, </p>
            <p>What we are doing here is stating any objects that we are creating
            specifically for this class and code. <b>Public</b> is of course whether
            or not other classes and objects can see this new object we are
            creating. <b>Renderer</b> is the class of the type of object, with renderer being an
            object that helps for us to see or not see our base object. Lastly
            <b>rend</b> is the name of our new object. Our <b>Renderer</b> object is
            named <b>rend</b> because we want to follow the standard Unity Naming
            style that can be seen in Unity’s documentation. This way if other
            people want see and understand our code, they don’t have to do too
            much guesswork about what kind of object <b>rend</b> is. If you decide
            not to follow that naming style, choose something that most people
            can understand. For example, I might use ren for Renderer. </p>
            
            <p>Under <b>void Update()</b>, we are going to create a new method called
            <b>ChangeGlobeColor()</b>. It is going to be a public method and it is
            not going to take any information in. </p>
            
            <p>The way you should this line out is like this:</p>
            
            <code>public void ChangeGlobeColor(){ }</code>
            
            <p>The brackets { } mean that anything inside of it belongs to the
            method. The class also uses brackets { } to say that everything
            inside them belong to the class. Always make sure and double
            check that for every opened bracket { you have a closed one }.</p> 
            
            <p>Inside <b>ChangeGlobeColor()</b>, you are going to type:</p>
            
            <code>rend = GetComponent< Renderer  >();</code>
            <code>rend.material.SetColor("_Color", Color.green);</code>
            
            <p>At the end of every line that doesn’t have a bracket,
            you want to use a semicolon ; . A semicolon ; is used
            to say that this is the end of what we want to do for
            that line. If we don’t include a semicolon, then Unity
            will assume that we want everything to happen all at
            once and not one at a time. </p>
            
            <p>The line <b>rend = GetComponent< Renderer>();</b> is saying
            that we are going to get the renderer part of our base
            object and put it into our new <b>rend</b> object. In other
            words, we haven’t told <b>rend</b> exactly what it is and it
            only knows what type of object it is, not what it has
            inside of it. With this line, we are saying that <b>rend</b> is
            going to get the renderer information that belongs to our
            <b>Globe</b>, keep it, and be our connection to our <b>Globe</b> just in
            case. Also the <b>equals =</b> is called assign in code lingo,
            because we are ‘assigning’ something to our object.</p>
            
            <p>The next line <b>rend.material.SetColor("_Color", Color.green);</b>
            is saying that we are going to get the material that belongs
            to our base object, using the information we have through our
            renderer, and change the color of our material to green. </p>
            
            <p>So with our code put together, you should have this:</p>
            
    <pre><code>
    using System.Collections;
    using System.Collections.Generic;
    using UnityEngine;</p>
            
    public class ColorChange : MonoBehaviour {
            
      //Following Unity Naming Conventions
      public Renderer rend; 
                
      //Leave Start() and Update() empty          
      // Use this for initialization
      void Start() { }
            
      // Update is called once per frame
      void Update(){ }
                
      public void ChangeGlobeColor()
      {
          rend = GetComponent< Renderer >();
          rend.material.SetColor("_Color", Color.green);
       }
    } </code></pre>
          
            
            <p>Perfect! We are almost done. </p>
            
            <p>Minimize <b>Microsoft Visual Studio</b> and click back on your <b>Globe</b>. Your
            <b>ColorChange</b> script should have our <b>rend</b> object visible. 
            Click on your <b>Globe</b> in your <b>Hierarchy</b> and drag it onto the empty space next to
            <b>Rend</b> that says <code>None (Renderer)</code> under our <b>ColorChange()</b> script.</p>
            
            
            <p>If we don’t do this, then our code won’t work because 
            it won’t know what object we want to change the color of. Just
            because our script is attached to our <b>Globe</b> does not mean that
            it is fully connected to it.</p> 
            
            <p>The last major thing we want to do is click on <b>Add Component</b>
            and type in <b>Event Trigger</b> into our search bar. Click on it
            when it appears. Then click on the button inside of it that
            says <b>Add New Event Type</b> and select <b>PointerClick</b> when it
            appears. </p>
            
            <p>Click on the plus + symbol. Drag your <b>Globe</b> object in the <b>Hierarchy</b>to the
            empty space under <b>Runtime Only</b> (which means only when the
            game is on). You should be able to now interact with list
            that was greyed out that says <b>No Function</b>. Click on it,
            go to <b>ColorChange()</b>, and then click on <b>ChangeGlobeColor()</b>.</p>
            
            <p>Save your changes.</p>
            
            
            <p>What we just did is tell our <b>Globe</b> object that whenever
            someone clicks on it, it does something. In this case,
            whenever someone clicks on our <b>Globe</b>, we want the color
            to change.</p> 
            
            <p>And that’s it for this script. Make sure to save and test
            your new script. </p>
            
            <p>One last time, this is the code you should have in your
            <b>ColorChange()</b> method:</p> 
            
             <pre><code>
    using System.Collections;
    using System.Collections.Generic;
    using UnityEngine;</p>
            
    public class ColorChange : MonoBehaviour {
            
      //Following Unity Naming Conventions
      public Renderer rend; 
                
      //Leave Start() and Update() empty          
      // Use this for initialization
      void Start() { }
            
      // Update is called once per frame
      void Update(){ }
                
      public void ChangeGlobeColor()
      {
          rend = GetComponent< Renderer  >();
          rend.material.SetColor("_Color", Color.green);
       }
    } </code></pre>
          
           
          
          
     <div class="wrapper">
        <div class="inner">
           <p>Click on the Previous button if you think you missed something in the 
            last part or click the Next button to .</p>
          <div id="container">
            <button id="prevBtn" title="prev"><a href="tutorials3section5">Previous</a></button>
            <button id="nextBtn" title="next"><a href="tutorials3section7">Next</a></button>
          </div>
    
        </div>
      </div>
    </body>
    <!-- Footer-->
    <section id="footer">
      <div class="inner">
        <ul class="copyright">
          <li>© Untitled Inc. All rights reserved.</li>
          <li>Design: <a href="http://html5up.net">HTML5 UP</a></li>
        </ul>
      </div>
    </section>
  </div>
  <!-- Scripts-->
  
  <script src="bootstrap2/js/skel.min.js"></script>
  <script src="bootstrap2/js/jquery.min.js"></script>
  <script src="bootstrap2/js/jquery.scrollex.min.js"></script>
  <script src="bootstrap2/js/util.js"></script><!--[if lte IE 8]>
  <script src="bootstrap2/js/ie/respond.min.js"></script><![endif]-->
  <script src="bootstrap2/js/main.js"></script>
</body>