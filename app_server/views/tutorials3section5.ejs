<!doctype html>
<html lang="en" ng-app>
  <head>
    <title>Tutorials4Unity</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap-responsive.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/main.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie9.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie8.css">
    <link rel="stylesheet" href="/bootstrap2/css/font-awesome.min.css">
    <style></style>
    </head>
    <body>
  <div id="page-wrapper">
    <!-- Header-->
    <header id="header">
      <h1><a href="/">Tutorials4Unity</a></h1>
      <nav><a href="#menu">Menu</a></nav>
       <button onclick="topFunction()" id="myBtn" title="Go to top">Go to the Top</button>
    </header>
    <!-- Menu-->
    <nav id="menu">
      <div class="inner">
        <h2>Menu</h2>
        <ul class="links">
          <li><a href="/">Home</a></li>
          <li><a href="tutorialshome">Tutorials</a></li>
          <li><a href="resources">Resources</a></li>
          <li><a href="about">About</a></li>
          <li><a href="help">Help</a></li>
           <li><a href="codehome">Code</a></li>
           <!--<li><a href="login">Log In</a></li>-->
          <!--<li><a href="signup">Sign Up</a></li>-->
        </ul><a href="#" class="close">Close</a>
      </div>
    </nav>
    <!-- Wrapper-->
    <section id="wrapper">
      <header>
        <div class="inner">
          <h1>Tutorial 3 Section 5</h1>
          <h2>Adding Objects</h2>
          
             <p>It's time to add in our items.</p>
             
             <p>If you would like to go back to any of the previous tutorials,
              please click <a href="tutorialshome">here!</a></p>
<!-- <iframe width="420" height="315"
          src="">
          </iframe> -->
        </div>
      </header>
      
      <!-- Content-->
      <div class="wrapper">
        <div class="inner">
      
          <p>Welcome back! </p>
            
            <p>We have our Player, we have our floor, but now...what is our game supposed to do anyways?</p>

                <p>Well, now we find out.</p>
                
                <p>Our game is going to be a very simple, but fun game. Basically we are going to have
                a bunch of different balls surround the player and when you click on them, they
                change color. The end goal will be click on all of the balls before the time runs
                out. You can then test your time against your friends and see who can do it the fastest.</p> 
                
                <p>In this chapter, we will be creating these balls and allow them to change color when
                we click on them.</p>
                <p>So, how do we do this?</p>
            
                <p>In our <b>Menu Bar</b>, we are going to click on <b>GameObject</b>. Go down to 3D object,
                slide over and click on <b>Sphere</b>. After clicking on <b>Sphere</b>, you should see a globe like shape
                appear in your <b>Hierarchy</b> and in your <b>Scene</b>. </p>
                
                <p>Click on your <b>Sphere</b> in your hierarchy and let us look at our <b>Inspector Window</b>.
                First off we want to see what position our <b>Sphere</b> is at. If it is not at position
                X=0, Y=0, Z=0, please fix this now. After fixing it, go into your <b>Scene View</b>,
                click on the green arrow pointing up, and drag it a little bit up. You want our 
                <b>Sphere</b> object to be a little bit above our <b>Floor</b> object, but not higher than
                what our <b>Player</b> object can see. If you want the exact number, change you X coordinate
                to 0.5 (so X= 0.5) and change your Y coordinate to 0.5 ( so Y= 0.5). We want our <b>Player</b> to still see
                the <b>Sphere</b> when we’re playing the game. </p>
                
                <p>If you don’t see any arrows, then in our <b>Tool Bar</b>, click on the four arrows
                crossing each other (or the <b>Move Tool</b>). After you click on this, you should
                see arrows pointing out from our <b>Sphere</b> object.</p>
                
                <p>Now so far you have seen one way to rename an object. Here is another way to
                rename an object. If you look at our <b>Inspector Window</b> (after making sure
                that we still have our <b>Sphere</b> object clicked), you will see the name of the
                current object that we are working on. If you click on it, you can actually
                change the name of our object. We are going to click and rename our <b>Sphere</b>
                object to become <b>Globe</b>. </p>
                
                <p>Underneath where we changed the name, there is a label called <b>Tag</b>. A <b>Tag</b>
                in Unity is a way for us to keep track, label, and be able to identify what
                our objects are. By default, the <b>Tag</b> for our <b>Globe</b> is <b>Untagged</b>. For
                future chapters (and for reasons that you will understand later on), we
                are going to give a <b>Tag</b>, or label, to our <b>Globe</b>.</p> 
                
                <p>Click on where it says <b>Untagged</b>. The box should open up and you should
                see a lot of different choices. What we are going to do is create a custom
                tag, so go all of the way to the bottom of this and click on <b>Add Tag...</b>.
                The <b>Inspector</b> should change to show you some of the custom tags you have
                already made for this game. Since this is the first one we have made, click
                on the <b>plus +</b> sign. </p>
                
                <p>A pop up should appear and it should ask you for the new tag name. Type in
                <b>GlobeObject</b> and then click on Save. You should see <b>GlobeObject</b> appear
                in your tags. Reclick on our <b>Globe</b>, reclick on <b>Untagged</b>, and then click
                on <b>GlobeObject</b>. This will officially give our <b>Globe</b> a tag. </p>  
                
               <p>The next thing we are going to do is give a color to our <b>Globe</b>. After
                we give our <b>Globe</b> some color, feel free to do the same to our <b>Floor</b>
                object. Just make sure that our <b>Floor</b> is not the same color as our <b>Globe</b>. </p>
                
                <p>In Unity, to give our <b>Globe</b> object a color, we have to change the color of
                the material of our <b>Globe</b>. The material is what we physically see of an
                object, whether it's the color, texture, or things that allow us to
                physically see the object. Now, every object that isn’t empty has the
                default material attached to it. That’s why all of our objects (except
                for our <b>Player</b>) has the color white attached to them. We can’t directly
                change the color of our material, but we can make a new one to put on. </p>
                
                <p>For the purpose of our game, only use the path we are using to make a
                material and don’t use any preexisting ones from other <b>Assets</b>. The
                reason why is because the way some materials are made use some other
                textures or have a bunch of different colors on them and for our game
                we want to make sure all of our <b>Globe</b> objects have a solid color on them.
                On the other hand, feel free to choose any materials you want to use
                for your <b>Floor</b>.</p>
                
                <p>So to make a material with a solid color, go to the <b>Project Folder</b>,
                click on <b>Create</b>, and then click on <b>Material</b>. In your <b>Assets</b>
                folder you should see a white sphere with the name <b>New Material</b>.
                Right click on this <b>New Material</b> and rename it to <b>RosyRed</b>. Then
                just normally click on <b>RosyRed</b>.</p>
                
                <p>In the <b>Inspector Window</b> you should see information about <b>RosyRed</b>.
                Click on the white space next to <b>Albedo</b> and the dropper symbol.
                A pop up should appear with a bunch of colors. In the box inside the
                circle, move the little circle all of the way to the right. In the
                big circle, move the circle inside there to a color that looks red.
                The color that the material should currently look like should be red. </p>
                
                <p>If you don’t know if you have the right kind of red or don’t know
                how to properly move the colors around, look under the colors and
                you will see text boxes next to RGB A. R stands for the color red.
                G stands for green. B stands for the color blue. And A stands for
                alpha, or how strong or clear a color looks. We want R to be 255
                (the max), G and B to both be 0, and for A to be 255. </p>
                
                <p>R= 255, G= 0, B= 0, A= 255</p>
                
                <p>This gives a nice and bright red. </p>
                
                <p>After you are done, click somewhere outside of the pop up to go back to Unity.</p> 
                
                <p>Lastly, click and drag <b>RosyRed</b> onto our <b>Globe</b>. The color for our
                <b>Globe</b> should now change to red and when you click on our <b>Globe</b>,
                you should see <b>RosyRed</b> in our <b>Inspector Window</b>. Double check
                that our <b>Shader</b> in <b>RosyRed</b> is set to <b>Standard</b> and make sure
                not to touch it. If it is not set to <b>Standard</b>, click on it and change it.</p>

                </p>
                

          
     <div class="wrapper">
        <div class="inner">
           <p>Click on the Previous button if you think you missed something in the 
            last part or click the Next button to .</p>
          <div id="container">
            <button id="prevBtn" title="prev"><a href="tutorials3section4">Previous</a></button>
            <button id="nextBtn" title="next"><a href="tutorials3section6">Next</a></button>
          </div>
    
        </div>
      </div>
    </body>
    <!-- Footer-->
    <section id="footer">
      <div class="inner">
        <ul class="copyright">
          <li>© Untitled Inc. All rights reserved.</li>
          <li>Design: <a href="http://html5up.net">HTML5 UP</a></li>
        </ul>
      </div>
    </section>
  </div>
  <!-- Scripts-->
  
  <script src="bootstrap2/js/skel.min.js"></script>
  <script src="bootstrap2/js/jquery.min.js"></script>
  <script src="bootstrap2/js/jquery.scrollex.min.js"></script>
  <script src="bootstrap2/js/util.js"></script><!--[if lte IE 8]>
  <script src="bootstrap2/js/ie/respond.min.js"></script><![endif]-->
  <script src="bootstrap2/js/main.js"></script>
</body>