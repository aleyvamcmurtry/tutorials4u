<!doctype html>
<html lang="en" ng-app>
  <head>
    <title>Tutorials4Unity</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap-responsive.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/main.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie9.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie8.css">
    <link rel="stylesheet" href="/bootstrap2/css/font-awesome.min.css">
    <style></style>
    </head>
    <body>
  <div id="page-wrapper">
    <!-- Header-->
    <header id="header">
      <h1><a href="/">Tutorials4Unity</a></h1>
      <nav><a href="#menu">Menu</a></nav>
       <button onclick="topFunction()" id="myBtn" title="Go to top">Go to the Top</button>
    </header>
    <!-- Menu-->
    <nav id="menu">
      <div class="inner">
        <h2>Menu</h2>
        <ul class="links">
          <li><a href="/">Home</a></li>
          <li><a href="tutorialshome">Tutorials</a></li>
          <li><a href="resources">Resources</a></li>
          <li><a href="about">About</a></li>
          <li><a href="help">Help</a></li>
           <li><a href="codehome">Code</a></li>
           <!--<li><a href="login">Log In</a></li>-->
          <!--<li><a href="signup">Sign Up</a></li>-->
        </ul><a href="#" class="close">Close</a>
      </div>
    </nav>
    <!-- Wrapper-->
    <section id="wrapper">
      <header>
        <div class="inner">
          <h1>Tutorial 3 Section 7</h1>
          <h2>Time is on our side to Count Scripts!</h2>
          
             <p>It's time to add our second script to our game.</p>
             
             <p>If you would like to go back to any of the previous tutorials,
              please click <a href="tutorialshome">here!</a></p>
         
            <!-- <iframe width="420" height="315"
          src="">
          </iframe> -->
        </div>
      </header>
      
      <!-- Content-->
      <div class="wrapper">
        <div class="inner">
            
            
         <p>
            Welcome back to our second script! Make sure to have Unity and your
           project open because we are starting right off.</p>
           
            <h4>Please remember to save after we have made any changes and especially before you try to test out your game. 
          If you try to play before you save, the new changes will not take effect and you will have to redo your changes.
          You can do this by going up to <b>File</b> and click on <b>Save</b>. You can also do this by pressing and holding <b>ctrl + S</b> (for PC)
          or <b>Command + S</b> (for Mac).</h4>
           
            <p>Like what we did with <b>ColorChange</b>, click on your <b>Globe</b>, look at
            your <b>Inspector Window</b>, click on <b>Add Component</b>, type in
            <b>New Script</b> to the search bar, select it, type in the name
            of our second script which is <b>CountWinOrLose</b>, and then
            click on <b>Create and Add</b>.</p>
            
            <p>Our second script, <b>CountWinOrLose</b>, should appear in the
            <b>Inspector</b>. Like before, click on the gear to the right hand
            side of <b>CountWinOrLose (Script)</b> and click on <b>Edit Script</b>.
            <b>Microsoft Visual Studios</b> should then open up (if it is not already opened)
            and you should see the class for <b>CountWinOrLose</b>.</p>
            
            <p>The <b>CountWinOrLose</b> class will be longer than <b>ColorChange</b>.
            Due to this, the <b>CountWinOrLose</b> class will be split into three sections.
            In this section, we will be talking about the <b>Update()</b> method, as well as
            some of the set up. </p>
            </p>
            
            <p>If you are on a Mac, please follow the instructions for <b>Microsoft Visual Studio</b> in <a href="tutorials3section6">Tutorial 3 Section 6</a></p>
            
            <p>First off, before we add anything inside <b>CountWinOrLose</b>,
            we are going to make a new call to a different libaray above
            <b>public class CountWinOrLose</b>. We are going to do this by
            first typing in <b>using</b> and then calling on a new library
            call <b>UnityEngine.UI</b>. </p>
            
            <p>The line should look like this:</p>
            <code>using UnityEngine.UI;</code>
            
            <p>But we already have <b>UnityEngine</b>, why do we need to call on
            it twice and add <b>.UI</b>. The reason for this is <b>UnityEngine</b>
            calls on everything inside Unity, and while we want to be able
            to use it (and we will), we also want to call on a specific
            area in addition. <b>UI</b> stands for <b>User Interface</b> and this
            usually has objects that the player can see, but don’t usually
            directly interact with other objects. Items inside the
            <b>User Interface</b> include buttons, text, etc.</p>
            
            <p>Now, let us begin to add code into our <b>CountWinOrLose</b> class. </p>
            
            <p>We are going to add objects that we will use throughout our code.</p>
             <p><strong>Remember whenever we add in new code, have it start on a new line. If not, 
            all of your code is going to look very messy and if you have a problem, it will be harder for you to find what the issue is.</strong></p>
            
            <p>Type in:</p>
            
    <pre><code>
    public int numOfGlobes;
    int actualGlobesNum = 10;
    public Text countText;
            
    public float timeLeft = 10f;
    public Text timeText;</code></pre>
            
            <p>If you noticed first, some of these objects have public in front
            of them, while others don’t. The objects that do have public in
            front of them are the objects that we want to be able to see and
            have intractable with not only our <b>Globe</b> but with our
            <b>Player</b> object later on.</p>
            
            <p>An int is a full number while a float is a fraction of a
            number. So an int can be the number 1, while a float can be 1, 3/2,
            or 1.5. We are using ints to count how many globes have changed
            color (numOfGlobes) and then, later on, we will compare that to
            the number of globes we have in our game (actualGlobesNum). While
            right now we only one <b>Globe</b> object, in the next chapter we
            will learn how to add more to our <b>Scene View</b>.</p>
            
            <p>For time, we are using a float to count how much time we have
            left in our game (timeLeft) because time is barely ever a full
            exact number and it changes quickly. For <b>timeLeft</b> we are
            starting at 10f. By adding f to the end of 10, we are telling
            our code that we specifically want this to be a float, just in case.</p>
            
            <p>Lastly, we want to show our <b>Player</b> how much time they have
            left and how many objects they have changed the color of. To
            do that, we are creating text to show them (timeText, countText). </p>
           
            <p>Again we are not using the <b>Start()</b> method. </p>
            
            <p>We are using the <b>Update()</b> method. We want time to be updated with
            each frame and we want to constantly be checking to see if our player has
            changed the color of all of the globes. In Unity, there are 24 frames
            per second, so the  <b>Update()</b> method is going to check to see if anything has changed every 1/24 of a second.</p> 
            
            <p>Inside the <b>Update()</b> method, type in this:</p>
            
   <pre><code>
    timeLeft -= Time.deltaTime;
    numOfGlobes = 0;


    //For Time
    if (timeLeft > -1){
        //For Counting
        numOfGlobes = CountingUp(numOfGlobes);

        if (numOfGlobes != actualGlobesNum){
            timeText.text = (timeLeft).ToString("0");
        }//if        

        WonOrLost(timeLeft, numOfGlobes);
    }//if            
    
    
    </code></pre>
            
            <p>Woah! What is all? What’s deltaTime? What’s this weird if thing?</p>
            
            <p>Take in a deep breath. Warning: The rest of this section is going
            to be a lot like this, where there is a lot of code going on. We will do our best to explain it.</p>
            
            <p>Let’s start with the first line. </p>
            
            <pre><code>timeLeft -= Time.deltaTime;</pre></code>
            
            <p>Remember timeLeft is the time the player has to play the game. 
            The - symbol is the minus symbol. When we have it next to the = symbol 
            (assigning), we are telling Unity that we are going to subtract the
            stuff on the right side of the = from the information on the left side.
            So -= means we are subtracting Time.deltaTime from the timeLeft (the time the player has left). </p>
            
            <p>Time.deltaTime just means the time that has happened since the
            last update. Think of Time.deltaTime as a stopwatch. It won’t stop moving unless we stop the game. </p>
            
            <p>So if timeLeft is 10 seconds, and Time.deltaTime starts, then timeLeft will change to 9, 8, 7,.... 1, 0, -1.</p>
            
            <p>But wait, do we want to show -1. No, we don’t. If we reach 0, then we want the game to end. In our if thing, we check this. </p>
            
            <p>Look at the line: </p>
            <pre><code>if(timeLeft > -1){</pre></code>
            
            <p>First off, this if thing is called an if statement. An if statement is
            a statement that checks to see if the stuff we put in its parenthesis is
            true or false. If it is true, we go inside of it, or into the lines in
            between the brackets { } and do the stuff inside of it. If it is false,
            we skip the side and go to the line after the closing bracket }.</p>
            
           <p>So if(timeLeft > -1) means that we are checking to see if timeLeft
           is bigger than -1. If timeLeft is bigger than -1, then we do the stuff
           inside. If timeLeft is -1, -2, or smaller, we skip this. That way the
           player can’t win if they don’t have time left.</p>
            
            <p>Now the inside this if statement. </p>
            
            <pre><code>numOfGlobes = CountingUp(numOfGlobes);</pre></code>
            
            <p>We are ‘assigning’ our numOfGlobes to... wait what’s CountingUp?
            We don’t have that. We will be creating this in a moment, so we will get back to this.</p>
            
            <p>Our next line is another if statement! It says: </p>
            <pre><code>if (numOfGlobes != actualGlobesNum).</pre></code>
            <p>So if the numOfGlobes (number of globes) that have changed
            colors does not equal the actualGlobesNum (the actual number of globes we have), then go inside. </p>
            
            <p>Inside we have our timeText being ‘assigned’ to the timeLeft.ToString(“0”).</p>
            <p>Our timeLeft is a float. In programming, you can’t just have a float
            become a string. They are two different types and many coding languages
            want you specifically only have types assigned to other types. So with
            timeLeft and Time.deltaTime, we can have them be assigned to each other
            easily because they are the same type. </p>
            
            <p>Luckily, since timeText is a string, we can use a pre-made method called
            a ToString. The ToString method allows us to print out the information
            from another type, like a float, and have it be apart of a string. We
            just have to have another string be apart of it. That’s why we have the 0 inside the parenthesis. </p>
            
            <p>Outside this second if statement, we have another method called WonOrLost that is called. 
            We will get back to this in section 9. </p>
            
            
                  <p>So far, your entire script should currently look like this:</p>
          <pre><code>
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class CountWinOrLose : MonoBehaviour{

    public int numOfGlobes;
    int actualGlobesNum = 1;
    public Text countGlobesText;

    public float timeLeft = 10f;
    public Text timeText;

    void Start(){  }

    // Update is called once per frame
    void Update(){
        timeLeft -= Time.deltaTime;
        numOfGlobes = 0;

        if (timeLeft > -1){
            numOfGlobes = CountingUp(numOfGlobes);

            if (numOfGlobes != actualGlobesNum){
                timeText.text = (timeLeft).ToString("0");
            }//if
            WonOrLost(timeLeft, numOfGlobes);
        }//if
    }//Update
}//CountWinOrLose
    </code></pre>
            
            <p>With all this code, make sure to double check you have opening and closing brackets
            (everyone of these { must have one of these } ) and that every line that does
            not end in a bracket must end in a semicolon (;).</p>
            
             <p>Wow that's a lot, but now we have two new methods to create. <b>CountingUp()</b> and <b>WonOrLost()</b>.</p>
           <p>We will be getting into these two methods in the next two sections.</p>
         
     <div class="wrapper">
        <div class="inner">
           <p>Click on the Previous button if you think you missed something in the 
            last part or click the Next button to .</p>
          <div id="container">
            <button id="prevBtn" title="prev"><a href="tutorials3section6">Previous</a></button>
            <button id="nextBtn" title="next"><a href="tutorials3section8">Next</a></button>
          </div>
    
        </div>
      </div>
    </body>
    <!-- Footer-->
    <section id="footer">
      <div class="inner">
        <ul class="copyright">
          <li>© Untitled Inc. All rights reserved.</li>
          <li>Design: <a href="http://html5up.net">HTML5 UP</a></li>
        </ul>
      </div>
    </section>
  </div>
  <!-- Scripts-->
  
  <script src="bootstrap2/js/skel.min.js"></script>
  <script src="bootstrap2/js/jquery.min.js"></script>
  <script src="bootstrap2/js/jquery.scrollex.min.js"></script>
  <script src="bootstrap2/js/util.js"></script><!--[if lte IE 8]>
  <script src="bootstrap2/js/ie/respond.min.js"></script><![endif]-->
  <script src="bootstrap2/js/main.js"></script>
</body>