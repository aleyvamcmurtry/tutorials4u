<!doctype html>
<html lang="en" ng-app>
  <head>
    <title>Tutorials4Unity</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap-responsive.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/main.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie9.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie8.css">
    <link rel="stylesheet" href="/bootstrap2/css/font-awesome.min.css">
    <style></style>
    </head>
    <body>
  <div id="page-wrapper">
    <!-- Header-->
    <header id="header">
      <h1><a href="/">Tutorials4Unity</a></h1>
      <nav><a href="#menu">Menu</a></nav>
       <button onclick="topFunction()" id="myBtn" title="Go to top">Go to the Top</button>
    </header>
    <!-- Menu-->
    <nav id="menu">
      <div class="inner">
        <h2>Menu</h2>
        <ul class="links">
          <li><a href="/">Home</a></li>
          <li><a href="tutorialshome">Tutorials</a></li>
          <li><a href="resources">Resources</a></li>
          <li><a href="about">About</a></li>
          <li><a href="help">Help</a></li>
           <!--<li><a href="login">Log In</a></li>-->
          <!--<li><a href="signup">Sign Up</a></li>-->
        </ul><a href="#" class="close">Close</a>
      </div>
    </nav>
    <!-- Wrapper-->
    <section id="wrapper">
      <header>
        <div class="inner">
          
          <h2>Final Touches</h2>
          
             <p>Let's add the Virtual Reality components to our Player.</p>
             
          <h2>Items</h2>
          
             <p>Let's create some items to collect!</p>
             
             <iframe width="420" height="315"
          src="">
          </iframe>
        </div>
      </header>
      
      <!-- Content-->
      <div class="wrapper">
        <div class="inner">
      
          <p>Welcome back! </p>
            
            <p>We have our ‘Player’ object, our ‘Main Camera’ as a child of it,
            and a ‘Floor’ to look at. </p>
            
            <p>In this chapter we will be adding our Google VR sdk to our 
            ‘Player’ object. </p>
            
            <p>As usual, first open up your project in Unity. Then click on
            ‘Main Camera’ that is underneath our ‘Player’ object. </p>
            
            <p>Now there are two ways we can do this next part. Path 1 is
            the path that we will be using a lot more in the future,
            especially when we don’t have something that is pre-made for
            us. We cannot use Path 1 to add on prefabs (more on this in 
            a second). Path 2 is used more when we have something that
            has already been created for us to use. </p>
            
            <p>Below are both paths that you can choose to use right now.
            It doesn’t matter which one at the moment and in future
            chapters, the tutorial will state which path you will need to use.</p> 
            
            <p>Path 1:
            Click on ‘Main Camera’. Look at our Inspector and it should
            have all of the current information and values for our camera.
            At the bottom of the information, there should be a button that
            says ‘Add Component’. Click on it. A bunch of different items
            will appear, but for the moment, in the search bar, type in:
            *GvrPointerPhysicsRaycaster*. When it comes up, make sure it
            is highlighted and click on it. After that, the Gvr Pointer
            Physics Raycaster Script should appear and become a part of
            the information for our ‘Main Camera’. </p>
            
            <p>Path 2:
            Go down and look at our ‘Project Window’ below. You will see
            a search bar. Type in: *GvrPointerPhysicsRaycaster*. Make
            sure to double check your spelling. You should see a piece
            of paper with the label C# on it. Click and drag it onto our
            ‘Main Camera’. Look at your ‘Inspector Window’ and double
            check that Gvr Pointer Physics Raycaster Script appears there. </p>
            
            <p>What is a raycaster?</p>
            
            <p>A raycaster gets all of the information from one specific
            location and checks whether or not the player or the object
            can do something. This something is usually an event, an event
            for example being an object disappearing or changing colors.
            The raycaster tells us whether or not if we click on a specific
            object whether an event can happen or not. Think of it being
            like the moon. You can see the moon, but you can’t really touch
            it, so by the raycaster’s understanding no event can take place
            between you and the moon. On the other hand, you can see your
            phone and you can pick it up. To the raycaster, it sees a phone
            and tell us that multiple events can happen, like picking it up,
            dropping it, turning it on. </p>
            
            <p>The specific raycaster we are using (physics raycaster) exists
            for the purpose of looking for 3D objects that we can touch. </p>
            
            <p>In future chapters, we will be going over in detail what a script
            is, as we will be creating our own and adding it to our game.
            For the moment, understand it as the code or instructions needed
            for our objects to do specific tasks. Also, the C# is pronounced
            as “C Sharp” and is the language that Unity understands to
            perform our tasks. </p>
            
            
            <p>Now we are going to go to our ‘Project Window’ and, like with
            our Path 2, we are going to type in and search for:
            *GvrEditorEmulator*. When it come up, you should see a blue
            box. Click and drag that to our ‘Hierarchy’. It should not
            be a child of any of our current objects. This Emulator is
            going to help our project act as a human head and move as a
            person’s head would, like moving up and down or side to side. </p>
            
            <p>Also, whenever you see a blue box like this, it means that
            this object is a prefab, or a basic copy of its original
            self that we can add into our project and make changes to as
            we see fit. Think of it as a coloring book. You can draw and
            color all of the art in the pages however you want, but the
            original artwork and drawings haven’t been changed. </p> 
            
            <p>Now we are going to look for another prefab. Go to our
            ‘Project Window’ and type in and search for: *GvrEventSystem*.
            When it come up, click and drag that to our ‘Hierarchy’. This
            prefab will allow for us to see where we are going to click in
            our game. </p>
            
            <p>Next we are look for the: *GvrReticlePointer*. Go to our
            ‘Project Window’ and type in and search for: *GvrReticlePointer*.
            Unlike the last two prefabs, we are actually going to drag and
            drop this object onto our ‘Main Camera’, The reason why we are
            doing this is because we want our ‘GvrReticlePointer’ to be a
            child of our ‘Main Camera’*(link to help)*. </p>
            
            <p>What the GvrReticlePointer is going to do is let us interact
            with the objects and items in the world we are creating for our
            game. By attaching this to our camera, whenever our player moves
            to look at something, we can look and click on whatever we are
            looking at. Remember, in virtual reality, our camera is like
            our eyes and everything is in first person. </p>
            
           <p>Wohoo! We have added all of the things we needed to do to our
            ‘Player’ so we can do things in virtual reality. Now we can
            actually test and double check that everything works. </p>
            
            <p>Click on the ‘Play’ button in our ‘Tool Bar’. The ‘Game View’
            should appear and we can look around our screen. </p>
            
            <p>In PC, hold down your ‘Alt’ button to look around everywhere.
            Hold down your ‘Ctrl’ button to replicate tilting. While you
            are doing this, you should see a small dot in the center of
            your screen. This is our GvrReticlePointer. Since there is
            nothing for us to interact with at the moment, the dot shouldn’t
            change. When you are done, press on the space button and you
            should see mouse again. Click again on the ‘Play’ button to stop.</p>
          
          
     <div class="wrapper">
        <div class="inner">
           <p>Click on the Previous button if you think you missed something in the 
            last part or click the Next button to .</p>
          <div id="container">
            <button id="prevBtn" title="prev"><a href="tutorials3section3">Previous</a></button>
            <button id="nextBtn" title="next"><a href="tutorials3section5">Next</a></button>
          </div>
    
        </div>
      </div>
    </body>
    <!-- Footer-->
    <section id="footer">
      <div class="inner">
        <ul class="copyright">
          <li>© Untitled Inc. All rights reserved.</li>
          <li>Design: <a href="http://html5up.net">HTML5 UP</a></li>
        </ul>
      </div>
    </section>
  </div>
  <!-- Scripts-->
  
  <script src="bootstrap2/js/skel.min.js"></script>
  <script src="bootstrap2/js/jquery.min.js"></script>
  <script src="bootstrap2/js/jquery.scrollex.min.js"></script>
  <script src="bootstrap2/js/util.js"></script><!--[if lte IE 8]>
  <script src="bootstrap2/js/ie/respond.min.js"></script><![endif]-->
  <script src="bootstrap2/js/main.js"></script>
</body>