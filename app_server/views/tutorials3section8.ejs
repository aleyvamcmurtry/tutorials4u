<!doctype html>
<html lang="en" ng-app>
  <head>
    <title>Tutorials4Unity</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/bootstrap-responsive.min.css">
    <link rel="stylesheet" href="/bootstrap2/css/main.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie9.css">
    <link rel="stylesheet" href="/bootstrap2/css/ie8.css">
    <link rel="stylesheet" href="/bootstrap2/css/font-awesome.min.css">
    <style></style>
    </head>
    <body>
  <div id="page-wrapper">
    <!-- Header-->
    <header id="header">
      <h1><a href="/">Tutorials4Unity</a></h1>
      <nav><a href="#menu">Menu</a></nav>
       <button onclick="topFunction()" id="myBtn" title="Go to top">Go to the Top</button>
    </header>
    <!-- Menu-->
    <nav id="menu">
      <div class="inner">
        <h2>Menu</h2>
        <ul class="links">
          <li><a href="/">Home</a></li>
          <li><a href="tutorialshome">Tutorials</a></li>
          <li><a href="resources">Resources</a></li>
          <li><a href="about">About</a></li>
          <li><a href="help">Help</a></li>
           <li><a href="codehome">Code</a></li>
           <!--<li><a href="login">Log In</a></li>-->
          <!--<li><a href="signup">Sign Up</a></li>-->
        </ul><a href="#" class="close">Close</a>
      </div>
    </nav>
    <!-- Wrapper-->
    <section id="wrapper">
      <header>
        <div class="inner">
          <h2>Tutorial 3 Section 8</h2>
          <h2>CountingUp!</h2>
          
             <p>Let's get into the CountingUp() method.</p>
             
             <p>If you would like to go back to any of the previous tutorials,
              please click <a href="tutorialshome">here!</a></p>
             <!-- <iframe width="420" height="315"
          src="">
          </iframe> -->
        </div>
      </header>
      
      <!-- Content-->
      <div class="wrapper">
        <div class="inner">
     
        <p>We are now going to create our <b>CountingUp</b> method that is a part of our
        <b>CountWinOrLose()</b> script. </p>
        
        <p>Here is what the method <b>CountingUp()</b> is going to do. </p>
        
        <p>Whenever our <b>Update()</b> calls on our <b>CountingUp()</b> method,
        our <b>CountingUp()</b> method is going to check to see if </p>
     
         <p>So unlike our <b>ChangeGlobeColor()</b> method in our <b>ColorChange</b> script, <b>CountingUp</b> is going to be 
         private (we don't want other scripts touching it), it is going to return (or send back) an int (a number), and 
         we are going to ask for an int parameter. CountingUp is going to ask to get some information first
         before it does any work. In this case, we want an int and inside <b>CountingUp</b> we are going to call this int countG. </p>
         
         <p>In our <b>Update()</b> method, we have the line <code>CountingUp(numOfGlobes)</code>.
         <b>CountingUp</b> is taking the numOfGlobes (since its an int), and temporary calling it countG so it can use it.</p>
         
         <p>It's like an ice cube tray, where the tray is the method. The tray asks for water,
         so you put water in the designated spots. Then the tray changes that water into 
         cube shaped ice after you put it into the fridge. The tray keeps the water from moving and
         helps it stay in one shape. </p>
         
         <p>Our method is going to do a more complicated version of this.</p>
         
         <p>Let's add the first part of this method. Type in:</p>
    
    <pre><code>
    private int CountingUp(int countG){
        GameObject gameObj;
        GameObject[] gameObjects = GameObject.FindGameObjectsWithTag("GlobeObject");

    </code></pre>
    
            <p><code>private int CountingUp(int countG){</code> is the information we were just describing. 
            Our method is private, we are going to return an int, we state the name of our method (CountingUp),
            and we ask for the int we need to use and give it a nickname of countG.</p>
            
            <p>On the next line, <code>GameObject gameObj;</code>, we are creating a new object
            that from the GameObject class called gameObj. A GameObject is an object that exists in the game that we can use to
            find information about that specific object and what it has. For example, we can find out if the object
            is red or green, which is what we will be doing in a moment. We are going to use GameObject to hold a copy of a single <b>Globe</b>. </p>
            
            <p>The line right after this, <code>GameObject[] gameObjects</code> 
            is an array of GameObjects[], which is why we put these two brackets here [ ], it tells the script 
            that we are creating an array, which we are calling gameObjects. An array is a list that holds the information of objects 
            and we are going to create and use it to keep track of how many globes we have. </p>
            
            <p>The next part of this line, <code>GameObject.FindGameObjectsWithTag("GlobeObject");</code> 
            is saying that we are going to use a method from the GameObject class called 
            <b>FindGameObjectsWithTag</b> and use it to look for any objects in our game that have the tag 
            <b>GlobeObject</b>. When it finds the objects, it will immediately put it into our array and create our list. 
            That is why earlier, we put a created a put a tag on our Globe, so when we have more of them,
            we can find them very easily.</p>
            
            <p>If we type the name of a class, like GameObject, we can use any methods that class has, as long as it 
            is a public class. For example, if we type in <b>ChangeColor()</b> and then put a period right after it, we 
            should be able to see and use <b>ChangeGlobeColor()</b> like this: <code>ChangeColor.ChangeGlobeColor()</code>.</p>
            
            <p>These lines can be kind of confusing. A simple way to understand it is like this. </p>
            
            <p>We are creating a bookcase and we are telling our friend to look throughout our house looking for books. When 
            they find books, they are going to put them in the order they found them straight into our bookcase, one at a time.</p>
            
            
            <p>Now that we have a GameObject and an array of GameObjects, but how do we see if any of the globes have changed color.</p>
    
            <p>Type in this line:</p>
            
            <code> for (int i = 0; i < actualGlobesNum; i++){ </code>
            
            <p>This is a for loop. A for loop goes through a range of items, doing different things to them that 
            the user decides, until the end of the range or there are no more items to look at.</p>
            
            <p>Now the for loop has 3 parts. The first part is where we state where we are going to start at.
            We do this by creating an int called i and setting it to 0.</p>
            <p>The second part tells the range and where we want to stop at. Since we are going to start at i, or 0,
            we are going to put i on there. Now, we don't want to go past the number of globes we have in our game,
            so we are going to compare i to the actual number of globes we have by using <b>actualGlobesNum</b>. 
            So while our i is less than actualGlobesNum, we go through the for loop. If at any point, i changes to be more
            than the amount of globes we have, the for loop breaks and we leave it. </p>
            
            <p>In the last part, we usually state how much we want i to increase everytime we go through the loop. 
            We want i to increase by 1 everytime, so we type in i++, which is the short version of i = i + 1 (the other way to do this).</p>
            
            <p>All together, our loop is going to start at 0 and stop when we have reached the number of globes in our game.
            Everytime it comes back from going inside our loop, we are going to increase the number of i by 1. </p>
            
            <p>We are going to type in the stuff that goes into our loop. Type:</p>
    
            <code>gameObj = gameObjects[i];</code>
            
            <p>Our gameObj that we created before the for loop, is going to be assigned to whatever object that is 
            currently in our array at position i. </p>
            
            <p>Now in programming, we rarely start at 1. Most things start at 0, with 0 being the initial number.
            So when we are counting the objects in the array, we are going to go 0, 1, 2, 3, 4, ..... 10 for example.</p>
            
            <p>The bracket around i here ([i]) is just saying that we want to be at that position and gather the information
            for the object that is at that position. </p>
            
            <p>Now type this if statement:</p>
            
            <pre><code>

            if (gameObj.GetComponent<Renderer>().material.color == Color.green){
                countG++;
                countGlobesText.text = countG + "";
            }//if
            </code></pre>
            
            <p>On the first line, we are going to take this object we just got information for, get the renderer component from it, 
            and find the color. Then we are going to check to see if the color if green. If it is, we go inside the if statement. 
            If it isn't then we skip the if statement.</p>
            
            <p>We are going to gameObj, using the GetComponent() method from the Game Object class, finding the renderer for it 
            (see <a href="tutorials3section6">Tutorial 3 Section 6)</a>, using the material() method from it, and finding the color.
            Then we are comparing the color to the color green. </p>
            
            <p>If the color is green, we add 1 to the int countG (<code>countG++;</code>) and changing the text for our globe count
            to countG. </p>
            
            <p>Our for loop should look like this:</p>
    <pre><code>
    for (int i = 0; i < actualGlobesNum; i++){
        gameObj = gameObjects[i];

        if (gameObj.GetComponent<Renderer>().material.color == Color.green){
            countG++;
            countGlobesText.text = countG + "";
        }//if
    }//for
    </code></pre>
            
            <p>When we are done with our if statement, whether we went into or not, our code will go back to our for loop and 
            go onto the next object. </p>
            
            <p>The last thing we need to do, besides making sure everything is "closed up" (making sure every bracket
            has a closing one), is returning an int, which was part of our method line. Because countG has the number
            of globes that have changed color, we are going to return this. Type:</p>
            
            <code>return countG;</code>
            
        <p>You should have this for your CountingUp() method.</p>
    
    <pre><code>
    private int CountingUp(int countG){
        GameObject gameObj;
        GameObject[] gameObjects = GameObject.FindGameObjectsWithTag("GlobeObject");

        for (int i = 0; i < actualGlobesNum; i++)
        {
            gameObj = gameObjects[i];

            if (gameObj.GetComponent<Renderer>().material.color == Color.green){
                countG++;
                countGlobesText.text = countG + "";
            }//if

        }//for
        
    }//CountingUp    
    </code></pre>
         
         
         <p>So now the line:
         <pre><code>numOfGlobes = CountingUp(numOfGlobes);</pre></code> in our <b>Update()</b> method 
         means that every frame (since our Update() method gets called on every frame),
            our script is going to check to see if any of the globes have changed to green. If they did, 
            our numOfGlobes will change to the number of globes that have changed.</p>
            
         <p>The code below is checking to see if the numOfGlobes is not equal to the actual 
         number of globes that we have. If the numOfGlobes is not equal to the actualGlobesNum, then
         we go inside the if statement and set our timeText to the current time that the player has left.</p>
         
         <pre><code>
        if (numOfGlobes != actualGlobesNum){
            timeText.text = (timeLeft).ToString("0");
        }//if 
         </code></pre>
         
         <p>If the numOfGlobes does equal actualGlobesNum, then we skip this and go to the next method 
         called <b>WonOrLost()</b>.</p>
         
         
         <p>So far, your entire script should currently look like this:</p>
          <pre><code>
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class CountWinOrLose : MonoBehaviour{

    public int numOfGlobes;
    int actualGlobesNum = 1;
    public Text countGlobesText;

    public float timeLeft = 10f;
    public Text timeText;

    void Start(){  }

    // Update is called once per frame
    void Update(){
        timeLeft -= Time.deltaTime;
        numOfGlobes = 0;

        if (timeLeft > -1){
            numOfGlobes = CountingUp(numOfGlobes);

            if (numOfGlobes != actualGlobesNum){
                timeText.text = (timeLeft).ToString("0");
            }//if
            WonOrLost(timeLeft, numOfGlobes);
        }//if
    }//Update

    private int CountingUp(int countG){
        GameObject gameObj;
        GameObject[] gameObjects = GameObject.FindGameObjectsWithTag("GlobeObject");

        for (int i = 0; i < actualGlobesNum; i++) {

            //had at <9, forgot 0 is an part in the index,
            //so was giving me IndexOutOfRangeException
            //cause there was nothing at index spot 8
            gameObj = gameObjects[i];

            if (gameObj.GetComponent<Renderer>().material.color == Color.green){
                countG++;
                countGlobesText.text = countG + "";
            }//if
        }//for
        return countG;
    }//CountingUp
}//CountWinOrLose
    </code></pre>
    
    <p>With all this code, make sure to double check you have opening and closing brackets
            (everyone of these { must have one of these } ) and that every line that does
            not end in a bracket must end in a semicolon (;).</p>
            
    
        <p>Awesome. We have one more method left. </p>
         
          
     <div class="wrapper">
        <div class="inner">
           <p>Click on the Previous button if you think you missed something in the 
            last part or click the Next button to .</p>
          <div id="container">
            <button id="prevBtn" title="prev"><a href="tutorials3section7">Previous</a></button>
            <button id="nextBtn" title="next"><a href="tutorials3section9">Next</a></button>
          </div>
    
        </div>
      </div>
    </body>
    <!-- Footer-->
    <section id="footer">
      <div class="inner">
        <ul class="copyright">
          <li>© Untitled Inc. All rights reserved.</li>
          <li>Design: <a href="http://html5up.net">HTML5 UP</a></li>
        </ul>
      </div>
    </section>
  </div>
  <!-- Scripts-->
  
  <script src="bootstrap2/js/skel.min.js"></script>
  <script src="bootstrap2/js/jquery.min.js"></script>
  <script src="bootstrap2/js/jquery.scrollex.min.js"></script>
  <script src="bootstrap2/js/util.js"></script><!--[if lte IE 8]>
  <script src="bootstrap2/js/ie/respond.min.js"></script><![endif]-->
  <script src="bootstrap2/js/main.js"></script>
</body>